
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Liberty frontend: /home/thanh/NCO/ram256x16/ram256x16_TT_1p8V_25C.lib
Imported 1 cell types from liberty file.
[INFO] Using SDC file '/home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

3. Executing Verilog-2005 frontend: /home/thanh/NCO/counter.v
Parsing SystemVerilog input from `/home/thanh/NCO/counter.v' to AST representation.
Storing AST representation for module `$abstract\counter'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/thanh/NCO/ram256x16/ram256x16.v
Parsing SystemVerilog input from `/home/thanh/NCO/ram256x16/ram256x16.v' to AST representation.
Storing AST representation for module `$abstract\ram256x16'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

6. Executing AST frontend in derive mode using pre-parsed AST for module `\counter'.
Generating RTLIL representation for module `\counter'.

6.1. Analyzing design hierarchy..
Top module:  \counter

6.2. Analyzing design hierarchy..
Top module:  \counter
Removing unused module `$abstract\ram256x16'.
Removing unused module `$abstract\counter'.
Removed 2 unused modules.
Renaming module counter to counter.

7. Generating Graphviz representation of design.
Writing dot description to `/home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/06-yosys-synthesis/hierarchy.dot'.
Dumping module counter to page 1.

8. Executing TRIBUF pass.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \counter

9.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

11. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/thanh/NCO/counter.v:50$4 in module counter.
Removed a total of 0 dead cases.

12. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 4 assignments to connections.

13. Executing PROC_INIT pass (extract init attributes).

14. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\counter.$proc$/home/thanh/NCO/counter.v:50$4'.

15. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

16. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$/home/thanh/NCO/counter.v:50$4'.
     1/2: $0\sine_out[15:0]
     2/2: $0\tcout[8:0]
Creating decoders for process `\counter.$proc$/home/thanh/NCO/counter.v:43$3'.

17. Executing PROC_DLATCH pass (convert process syncs to latches).

18. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.\sine_out' using process `\counter.$proc$/home/thanh/NCO/counter.v:50$4'.
  created $adff cell `$procdff$16' with positive edge clock and positive level reset.
Creating register for signal `\counter.\tcout' using process `\counter.$proc$/home/thanh/NCO/counter.v:50$4'.
  created $adff cell `$procdff$19' with positive edge clock and positive level reset.
Creating register for signal `\counter.\sine_out_reg0' using process `\counter.$proc$/home/thanh/NCO/counter.v:43$3'.
  created $dff cell `$procdff$20' with positive edge clock.
Creating register for signal `\counter.\sine_out_reg1' using process `\counter.$proc$/home/thanh/NCO/counter.v:43$3'.
  created $dff cell `$procdff$21' with positive edge clock.
Creating register for signal `\counter.\tcout_delay' using process `\counter.$proc$/home/thanh/NCO/counter.v:43$3'.
  created $dff cell `$procdff$22' with positive edge clock.

19. Executing PROC_MEMWR pass (convert process memory writes to cells).

20. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\counter.$proc$/home/thanh/NCO/counter.v:50$4'.
Removing empty process `counter.$proc$/home/thanh/NCO/counter.v:50$4'.
Removing empty process `counter.$proc$/home/thanh/NCO/counter.v:43$3'.
Cleaned up 2 empty switches.

21. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~4 debug messages>

23. Executing FLATTEN pass (flatten design).

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

26. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

29. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

31. Executing OPT_DFF pass (perform DFF optimizations).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

33. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

34. Executing FSM pass (extract and optimize FSM).

34.1. Executing FSM_DETECT pass (finding FSMs in design).

34.2. Executing FSM_EXTRACT pass (extracting FSM from design).

34.3. Executing FSM_OPT pass (simple optimizations of FSMs).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

34.5. Executing FSM_OPT pass (simple optimizations of FSMs).

34.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

34.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

34.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

35. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

37. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

38. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

40. Executing OPT_DFF pass (perform DFF optimizations).

41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

42. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

43. Executing WREDUCE pass (reducing word size of cells).
Removed top 20 bits (of 32) from port A of cell counter.$div$/home/thanh/NCO/counter.v:28$2 ($div).
Removed top 31 bits (of 32) from port B of cell counter.$sub$/home/thanh/NCO/counter.v:56$5 ($sub).
Removed top 22 bits (of 32) from port Y of cell counter.$sub$/home/thanh/NCO/counter.v:56$5 ($sub).
Removed top 31 bits (of 32) from port B of cell counter.$add$/home/thanh/NCO/counter.v:60$7 ($add).
Removed top 23 bits (of 32) from port Y of cell counter.$add$/home/thanh/NCO/counter.v:60$7 ($add).
Removed top 23 bits (of 32) from wire counter.$add$/home/thanh/NCO/counter.v:60$7_Y.

44. Executing PEEPOPT pass (run peephole optimizers).

45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

46. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter:
  creating $macc model for $add$/home/thanh/NCO/counter.v:60$7 ($add).
  creating $macc model for $sub$/home/thanh/NCO/counter.v:56$5 ($sub).
  creating $alu model for $macc $sub$/home/thanh/NCO/counter.v:56$5.
  creating $alu model for $macc $add$/home/thanh/NCO/counter.v:60$7.
  creating $alu cell for $add$/home/thanh/NCO/counter.v:60$7: $auto$alumacc.cc:485:replace_alu$24
  creating $alu cell for $sub$/home/thanh/NCO/counter.v:56$5: $auto$alumacc.cc:485:replace_alu$27
  created 2 $alu and 0 $macc cells.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

50. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

51. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

53. Executing OPT_DFF pass (perform DFF optimizations).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

55. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

56. Executing MEMORY pass.

56.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

56.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

56.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

56.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

56.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

56.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

56.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

56.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

56.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

56.10. Executing MEMORY_COLLECT pass (generating $mem cells).

57. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

58. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~1 debug messages>

59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

60. Executing OPT_DFF pass (perform DFF optimizations).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

62. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

63. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

64. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

65. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

66. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

67. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

68. Executing OPT_SHARE pass.

69. Executing OPT_DFF pass (perform DFF optimizations).

70. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

71. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

72. Executing TECHMAP pass (map to technology primitives).

72.1. Executing Verilog-2005 frontend: /nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

72.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$b69f3d11f5bf4768436d2b37eb5b01543c4ad49d\_90_div for cells of type $div.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$8d7f98f10ed0231647041eea72c2a8a293a33560\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$b69f3d11f5bf4768436d2b37eb5b01543c4ad49d\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000100000 for cells of type $__div_mod_u.
Using extmapper simplemap for cells of type $or.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$789c344356a154d2afc7b832b41d1067dbc946ba\_90_alu for cells of type $alu.
Using template $paramod$e39069e3f4ee35c1eea86993bd74689959babaab\_90_alu for cells of type $alu.
Using template $paramod$d7aca3dc44b07ff19908fb1a3b606577588c15f1\_90_alu for cells of type $alu.
Using template $paramod$f9e3a3c4b84f99cb56fad07743ec44ad55b11c8b\_90_alu for cells of type $alu.
Using template $paramod$dd5ba471f7dcf35707f23b88cfd15b9582f97277\_90_alu for cells of type $alu.
Using template $paramod$b7531bc0616f8d4cdd8159edd2237c9ddbb2ce01\_90_alu for cells of type $alu.
Using template $paramod$ff8ba121d2f8e85b775c9f35ef677a1a276e7e1b\_90_alu for cells of type $alu.
Using template $paramod$9a66d4bebbc4fab84566caffef9f094a1a467389\_90_alu for cells of type $alu.
Using template $paramod$57bc309a5d8a948cec8981d26d896ee1cbf54d58\_90_alu for cells of type $alu.
Using template $paramod$f94cfdb8ad389f4fc4515bcb65bccd7e2d189e95\_90_alu for cells of type $alu.
Using template $paramod$2a25669ccd39fe7c0fbfb2a4d17416fc78667f00\_90_alu for cells of type $alu.
Using template $paramod$d9397dfdf5f7cf5715aebc9527845402880218a0\_90_alu for cells of type $alu.
Using template $paramod$acc477ace2583cc2ee0cf651c72a385d2bbbe9f1\_90_alu for cells of type $alu.
Using template $paramod$415abdcadc251df4f0f033b62b8f3296b8461b4e\_90_alu for cells of type $alu.
Using template $paramod$6573c1c269218f299badf6e04ca86aa37fdb352c\_90_alu for cells of type $alu.
Using template $paramod$6a21b72c9c0b32e81b169c7e08a4d8b9c462448f\_90_alu for cells of type $alu.
Using template $paramod$324e0706ebb77f1915b22f4a136962ec3fd1d7ff\_90_alu for cells of type $alu.
Using template $paramod$461fc931d630cb01bec1fea87f37fbcc53f6f6a4\_90_alu for cells of type $alu.
Using template $paramod$fe074227b1c5fbaa1ea56076182c29dbcf3a782a\_90_alu for cells of type $alu.
Using template $paramod$85502450775e62e9c6a2fe29020b3433d4335647\_90_alu for cells of type $alu.
Using template $paramod$e32c921f95fe0e2350204f4ecefc9e296355521b\_90_alu for cells of type $alu.
Using template $paramod$05d913fba320393c7e943e625bef3af776153b60\_90_alu for cells of type $alu.
Using template $paramod$8e07e2c0a3efc148d2f3714f3901076678774ed1\_90_alu for cells of type $alu.
Using template $paramod$5b7e592b3c2951af6800b7fd597f66a79b72b91c\_90_alu for cells of type $alu.
Using template $paramod$90182783100594e2dd636a282c4723cfc9adaedd\_90_alu for cells of type $alu.
Using template $paramod$851c5c9b30913ea2deae68e3ca9e9c4e649723bc\_90_alu for cells of type $alu.
Using template $paramod$1445aacdb5f2a1ef9fedf1373097ffa45438211d\_90_alu for cells of type $alu.
Using template $paramod$7add42b712fe5bbbba521e93062103d6bf78a453\_90_alu for cells of type $alu.
Using template $paramod$b6f86f6a0c43c26b22ee55f51e05d5951f0e6562\_90_alu for cells of type $alu.
Using template $paramod$044fdceace8c449ec99f900b42120ac005ff4065\_90_alu for cells of type $alu.
Using template $paramod$b6b58933bcf3c8b9e3e5de18c2637bd0e12c7c47\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100010 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100011 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100100 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100101 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100110 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100111 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101001 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101010 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101011 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101100 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101101 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101110 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000101111 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110001 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110010 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110011 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110100 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110101 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110110 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111001 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111010 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111011 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111110 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000111111 for cells of type $lcu.
No more expansions possible.
<suppressed ~22013 debug messages>

73. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~21939 debug messages>

74. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
<suppressed ~23247 debug messages>
Removed a total of 7749 cells.

75. Executing OPT_DFF pass (perform DFF optimizations).

76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 540 unused cells and 13896 unused wires.
<suppressed ~541 debug messages>

77. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~9 debug messages>

78. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
<suppressed ~204 debug messages>
Removed a total of 68 cells.

79. Executing OPT_DFF pass (perform DFF optimizations).

80. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

81. Executing ABC pass (technology mapping using ABC).

81.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 5775 gates and 5826 wires to a netlist network with 50 inputs and 25 outputs.

81.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

81.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:      325
ABC RESULTS:               NOT cells:      262
ABC RESULTS:             ORNOT cells:      303
ABC RESULTS:              XNOR cells:      132
ABC RESULTS:               AND cells:       29
ABC RESULTS:              NAND cells:       52
ABC RESULTS:                OR cells:      467
ABC RESULTS:               XOR cells:      696
ABC RESULTS:            ANDNOT cells:     1776
ABC RESULTS:               MUX cells:      718
ABC RESULTS:        internal signals:     5751
ABC RESULTS:           input signals:       50
ABC RESULTS:          output signals:       25
Removing temp directory.

82. Executing OPT pass (performing simple optimizations).

82.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

82.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
<suppressed ~357 debug messages>
Removed a total of 119 cells.

82.3. Executing OPT_DFF pass (perform DFF optimizations).

82.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 2492 unused wires.
<suppressed ~2 debug messages>

82.5. Finished fast OPT passes.

83. Executing HIERARCHY pass (managing design hierarchy).

83.1. Analyzing design hierarchy..
Top module:  \counter

83.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

84. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

85. Printing statistics.

=== counter ===

   Number of wires:               4635
   Number of wire bits:           4792
   Number of public wires:          17
   Number of public wire bits:     151
   Number of ports:                 11
   Number of port bits:             76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4702
     $_ANDNOT_                    1689
     $_AND_                         29
     $_DFF_PP0_                     25
     $_DFF_P_                       34
     $_MUX_                        718
     $_NAND_                        50
     $_NOR_                        319
     $_NOT_                        262
     $_ORNOT_                      303
     $_OR_                         443
     $_XNOR_                       132
     $_XOR_                        696
     ram256x16                       2

86. Generating Graphviz representation of design.
Writing dot description to `/home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module counter to page 1.

87. Executing OPT pass (performing simple optimizations).

87.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

87.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

87.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

87.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

87.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

87.6. Executing OPT_DFF pass (perform DFF optimizations).

87.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

87.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

87.9. Finished OPT passes. (There is nothing left to do.)

88. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/tmp/5c4f662b3d494b249ff53d95f23bf523.lib ",
   "modules": {
      "\\counter": {
         "num_wires":         4635,
         "num_wire_bits":     4792,
         "num_pub_wires":     17,
         "num_pub_wire_bits": 151,
         "num_ports":         11,
         "num_port_bits":     76,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4702,
         "num_cells_by_type": {
            "$_ANDNOT_": 1689,
            "$_AND_": 29,
            "$_DFF_PP0_": 25,
            "$_DFF_P_": 34,
            "$_MUX_": 718,
            "$_NAND_": 50,
            "$_NOR_": 319,
            "$_NOT_": 262,
            "$_ORNOT_": 303,
            "$_OR_": 443,
            "$_XNOR_": 132,
            "$_XOR_": 696,
            "ram256x16": 2
         }
      }
   },
      "design": {
         "num_wires":         4635,
         "num_wire_bits":     4792,
         "num_pub_wires":     17,
         "num_pub_wire_bits": 151,
         "num_ports":         11,
         "num_port_bits":     76,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4702,
         "num_cells_by_type": {
            "$_ANDNOT_": 1689,
            "$_AND_": 29,
            "$_DFF_PP0_": 25,
            "$_DFF_P_": 34,
            "$_MUX_": 718,
            "$_NAND_": 50,
            "$_NOR_": 319,
            "$_NOT_": 262,
            "$_ORNOT_": 303,
            "$_OR_": 443,
            "$_XNOR_": 132,
            "$_XOR_": 696,
            "ram256x16": 2
         }
      }
}

89. Printing statistics.

=== counter ===

   Number of wires:               4635
   Number of wire bits:           4792
   Number of public wires:          17
   Number of public wire bits:     151
   Number of ports:                 11
   Number of port bits:             76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4702
     $_ANDNOT_                    1689
     $_AND_                         29
     $_DFF_PP0_                     25
     $_DFF_P_                       34
     $_MUX_                        718
     $_NAND_                        50
     $_NOR_                        319
     $_NOT_                        262
     $_ORNOT_                      303
     $_OR_                         443
     $_XNOR_                       132
     $_XOR_                        696
     ram256x16                       2

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type $_DFF_P_ is unknown!
   Area for cell type $_DFF_PP0_ is unknown!
   Area for cell type \ram256x16 is unknown!

[INFO] Applying tri-state buffer mapping from '/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

90. Executing TECHMAP pass (map to technology primitives).

90.1. Executing Verilog-2005 frontend: /home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

90.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

91. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

92. Executing TECHMAP pass (map to technology primitives).

92.1. Executing Verilog-2005 frontend: /home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

92.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

93. Executing SIMPLEMAP pass (map simple cells to gate primitives).

94. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

94.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\counter':
  mapped 25 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 34 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/tmp/5c4f662b3d494b249ff53d95f23bf523.lib ",
   "modules": {
      "\\counter": {
         "num_wires":         4660,
         "num_wire_bits":     4817,
         "num_pub_wires":     17,
         "num_pub_wire_bits": 151,
         "num_ports":         11,
         "num_port_bits":     76,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4727,
         "area":              1380.073600,
         "num_cells_by_type": {
            "$_ANDNOT_": 1689,
            "$_AND_": 29,
            "$_MUX_": 718,
            "$_NAND_": 50,
            "$_NOR_": 319,
            "$_NOT_": 287,
            "$_ORNOT_": 303,
            "$_OR_": 443,
            "$_XNOR_": 132,
            "$_XOR_": 696,
            "ram256x16": 2,
            "sky130_fd_sc_hd__dfrtp_2": 25,
            "sky130_fd_sc_hd__dfxtp_2": 34
         }
      }
   },
      "design": {
         "num_wires":         4660,
         "num_wire_bits":     4817,
         "num_pub_wires":     17,
         "num_pub_wire_bits": 151,
         "num_ports":         11,
         "num_port_bits":     76,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4727,
         "area":              1380.073600,
         "num_cells_by_type": {
            "$_ANDNOT_": 1689,
            "$_AND_": 29,
            "$_MUX_": 718,
            "$_NAND_": 50,
            "$_NOR_": 319,
            "$_NOT_": 287,
            "$_ORNOT_": 303,
            "$_OR_": 443,
            "$_XNOR_": 132,
            "$_XOR_": 696,
            "ram256x16": 2,
            "sky130_fd_sc_hd__dfrtp_2": 25,
            "sky130_fd_sc_hd__dfxtp_2": 34
         }
      }
}

95. Printing statistics.

=== counter ===

   Number of wires:               4660
   Number of wire bits:           4817
   Number of public wires:          17
   Number of public wire bits:     151
   Number of ports:                 11
   Number of port bits:             76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4727
     $_ANDNOT_                    1689
     $_AND_                         29
     $_MUX_                        718
     $_NAND_                        50
     $_NOR_                        319
     $_NOT_                        287
     $_ORNOT_                      303
     $_OR_                         443
     $_XNOR_                       132
     $_XOR_                        696
     ram256x16                       2
     sky130_fd_sc_hd__dfrtp_2       25
     sky130_fd_sc_hd__dfxtp_2       34

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type \ram256x16 is unknown!

   Chip area for module '\counter': 1380.073600
     of which used for sequential elements: 1380.073600 (100.00%)

[INFO] Using generated ABC script '/home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/06-yosys-synthesis/AREA_0.abc'â€¦

96. Executing ABC pass (technology mapping using ABC).

96.1. Extracting gate netlist of module `\counter' to `/tmp/yosys-abc-fDJJXJ/input.blif'..
Extracted 4666 gates and 4717 wires to a netlist network with 51 inputs and 50 outputs.

96.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-fDJJXJ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-fDJJXJ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-fDJJXJ/input.blif 
ABC: + read_lib -w /home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/tmp/5c4f662b3d494b249ff53d95f23bf523.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/tmp/5c4f662b3d494b249ff53d95f23bf523.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/06-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    291 ( 13.4 %)   Cap = 12.0 ff (  4.6 %)   Area =     2596.24 ( 75.6 %)   Delay = 12588.47 ps  ( 29.2 %)               
ABC: Path  0 --       6 : 0   24 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  96.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     111 : 4    2 sky130_fd_sc_hd__or4b_2  A =  10.01  Df = 674.6 -484.8 ps  S = 116.4 ps  Cin =  1.5 ff  Cout =   6.6 ff  Cmax = 265.5 ff  G =  428  
ABC: Path  2 --     112 : 3    2 sky130_fd_sc_hd__or3b_2  A =   8.76  Df = 903.7 -260.6 ps  S =  89.1 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 269.2 ff  G =  389  
ABC: Path  3 --     118 : 3    2 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df = 949.3 -173.3 ps  S =  93.8 ps  Cin =  4.6 ff  Cout =   4.0 ff  Cmax = 128.2 ff  G =   82  
ABC: Path  4 --     119 : 3    2 sky130_fd_sc_hd__o21ba_2 A =  10.01  Df =1207.5  -68.3 ps  S =  47.3 ps  Cin =  2.1 ff  Cout =   4.9 ff  Cmax = 264.6 ff  G =  222  
ABC: Path  5 --     132 : 4    3 sky130_fd_sc_hd__o31a_2  A =  10.01  Df =1443.8  -90.9 ps  S =  76.6 ps  Cin =  2.3 ff  Cout =  10.9 ff  Cmax = 285.7 ff  G =  437  
ABC: Path  6 --     140 : 4    3 sky130_fd_sc_hd__or4_2   A =   8.76  Df =2087.7 -599.0 ps  S = 123.8 ps  Cin =  1.5 ff  Cout =   8.7 ff  Cmax = 310.4 ff  G =  552  
ABC: Path  7 --     142 : 3    3 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =2336.9 -425.3 ps  S =  53.9 ps  Cin =  2.4 ff  Cout =   7.4 ff  Cmax = 309.5 ff  G =  306  
ABC: Path  8 --     145 : 3    1 sky130_fd_sc_hd__and3_2  A =   7.51  Df =2497.3 -127.2 ps  S =  36.9 ps  Cin =  1.5 ff  Cout =   1.6 ff  Cmax = 309.5 ff  G =  100  
ABC: Path  9 --     154 : 2    1 sky130_fd_sc_hd__or2_2   A =   6.26  Df =2773.4 -245.6 ps  S =  50.6 ps  Cin =  1.5 ff  Cout =   2.0 ff  Cmax = 299.4 ff  G =  129  
ABC: Path 10 --     155 : 3    4 sky130_fd_sc_hd__mux2_1  A =  11.26  Df =3149.1  -27.8 ps  S = 127.5 ps  Cin =  2.3 ff  Cout =  13.0 ff  Cmax = 173.0 ff  G =  551  
ABC: Path 11 --     156 : 2    2 sky130_fd_sc_hd__or2_2   A =   6.26  Df =3419.0 -137.4 ps  S =  60.7 ps  Cin =  1.5 ff  Cout =   4.9 ff  Cmax = 299.4 ff  G =  324  
ABC: Path 12 --     166 : 4    7 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =3763.9 -308.8 ps  S =  99.5 ps  Cin =  2.4 ff  Cout =  18.5 ff  Cmax = 325.0 ff  G =  762  
ABC: Path 13 --     181 : 3    1 sky130_fd_sc_hd__and3_2  A =   7.51  Df =3966.4 -337.1 ps  S =  41.8 ps  Cin =  1.5 ff  Cout =   2.5 ff  Cmax = 309.5 ff  G =  158  
ABC: Path 14 --     187 : 4    3 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =4284.7 -243.0 ps  S =  63.6 ps  Cin =  2.4 ff  Cout =   8.7 ff  Cmax = 325.0 ff  G =  357  
ABC: Path 15 --     191 : 4    3 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =4619.3 -193.2 ps  S =  81.9 ps  Cin =  2.4 ff  Cout =  14.4 ff  Cmax = 325.0 ff  G =  583  
ABC: Path 16 --     192 : 3    6 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =4876.3 -355.0 ps  S = 249.3 ps  Cin =  4.6 ff  Cout =  18.5 ff  Cmax = 128.2 ff  G =  391  
ABC: Path 17 --     195 : 3    4 sky130_fd_sc_hd__mux2_1  A =  11.26  Df =5218.5 -320.4 ps  S = 126.0 ps  Cin =  2.3 ff  Cout =  12.8 ff  Cmax = 173.0 ff  G =  531  
ABC: Path 18 --     196 : 2    4 sky130_fd_sc_hd__nand2_2 A =   6.26  Df =5326.2 -293.2 ps  S = 112.7 ps  Cin =  4.4 ff  Cout =  18.2 ff  Cmax = 295.7 ff  G =  400  
ABC: Path 19 --     211 : 4    8 sky130_fd_sc_hd__a31oi_2 A =  12.51  Df =5664.9  -52.0 ps  S = 417.7 ps  Cin =  4.4 ff  Cout =  28.4 ff  Cmax = 118.1 ff  G =  622  
ABC: Path 20 --     304 : 4    2 sky130_fd_sc_hd__a31o_2  A =   8.76  Df =10839.1 -244.5 ps  S =  62.1 ps  Cin =  2.4 ff  Cout =   6.6 ff  Cmax = 271.9 ff  G =  269  
ABC: Path 21 --     305 : 3    1 sky130_fd_sc_hd__and3_2  A =   7.51  Df =11033.3 -186.7 ps  S =  36.6 ps  Cin =  1.5 ff  Cout =   1.5 ff  Cmax = 309.5 ff  G =   95  
ABC: Path 22 --     324 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df =11665.7 -591.1 ps  S =  89.8 ps  Cin =  1.5 ff  Cout =   1.4 ff  Cmax = 310.4 ff  G =   89  
ABC: Path 23 --     325 : 4    9 sky130_fd_sc_hd__or4_2   A =   8.76  Df =12278.1-1073.5 ps  S = 142.7 ps  Cin =  1.5 ff  Cout =  13.3 ff  Cmax = 310.4 ff  G =  869  
ABC: Path 24 --     326 : 2    1 sky130_fd_sc_hd__and2b_2 A =   8.76  Df =12588.5-1132.6 ps  S = 175.0 ps  Cin =  1.6 ff  Cout =  33.4 ff  Cmax = 310.4 ff  G = 2111  
ABC: Start-point = pi5 (\num [3]).  End-point = po0 ($0\tcout[8:0] [0]).
ABC: netlist                       : i/o =   51/   50  lat =    0  nd =   291  edge =    743  area =2596.59  delay =42.00  lev = 42
ABC: + write_blif /tmp/yosys-abc-fDJJXJ/output.blif 

96.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       39
ABC RESULTS:        internal signals:     4616
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       50
Removing temp directory.

97. Executing SETUNDEF pass (replace undef values with defined constants).

98. Executing HILOMAP pass (mapping to constant drivers).

99. Executing SPLITNETS pass (splitting up multi-bit signals).

100. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 4717 unused wires.
<suppressed ~1 debug messages>

101. Executing INSBUF pass (insert buffer cells for connected wires).

102. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/thanh/NCO/runs/RUN_2025-03-06_16-06-07/tmp/5c4f662b3d494b249ff53d95f23bf523.lib ",
   "modules": {
      "\\counter": {
         "num_wires":         379,
         "num_wire_bits":     444,
         "num_pub_wires":     86,
         "num_pub_wire_bits": 151,
         "num_ports":         11,
         "num_port_bits":     76,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         354,
         "area":              3983.820800,
         "num_cells_by_type": {
            "ram256x16": 2,
            "sky130_fd_sc_hd__a2111o_2": 2,
            "sky130_fd_sc_hd__a211o_2": 7,
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 3,
            "sky130_fd_sc_hd__a21boi_2": 1,
            "sky130_fd_sc_hd__a21o_2": 11,
            "sky130_fd_sc_hd__a21oi_2": 17,
            "sky130_fd_sc_hd__a221o_2": 3,
            "sky130_fd_sc_hd__a22o_2": 2,
            "sky130_fd_sc_hd__a311o_2": 2,
            "sky130_fd_sc_hd__a311oi_2": 1,
            "sky130_fd_sc_hd__a31o_2": 4,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__and2_2": 14,
            "sky130_fd_sc_hd__and2b_2": 4,
            "sky130_fd_sc_hd__and3_2": 18,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__conb_1": 2,
            "sky130_fd_sc_hd__dfrtp_2": 25,
            "sky130_fd_sc_hd__dfxtp_2": 34,
            "sky130_fd_sc_hd__inv_2": 39,
            "sky130_fd_sc_hd__mux2_1": 30,
            "sky130_fd_sc_hd__nand2_2": 27,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3_2": 3,
            "sky130_fd_sc_hd__nand3b_2": 2,
            "sky130_fd_sc_hd__nand4_2": 2,
            "sky130_fd_sc_hd__nor2_2": 13,
            "sky130_fd_sc_hd__o211a_2": 2,
            "sky130_fd_sc_hd__o21a_2": 2,
            "sky130_fd_sc_hd__o21ai_2": 2,
            "sky130_fd_sc_hd__o21ba_2": 4,
            "sky130_fd_sc_hd__o21bai_2": 2,
            "sky130_fd_sc_hd__o221a_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 3,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 1,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__or2_2": 17,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3b_2": 2,
            "sky130_fd_sc_hd__or4_2": 4,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 29,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
   },
      "design": {
         "num_wires":         379,
         "num_wire_bits":     444,
         "num_pub_wires":     86,
         "num_pub_wire_bits": 151,
         "num_ports":         11,
         "num_port_bits":     76,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         354,
         "area":              3983.820800,
         "num_cells_by_type": {
            "ram256x16": 2,
            "sky130_fd_sc_hd__a2111o_2": 2,
            "sky130_fd_sc_hd__a211o_2": 7,
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 3,
            "sky130_fd_sc_hd__a21boi_2": 1,
            "sky130_fd_sc_hd__a21o_2": 11,
            "sky130_fd_sc_hd__a21oi_2": 17,
            "sky130_fd_sc_hd__a221o_2": 3,
            "sky130_fd_sc_hd__a22o_2": 2,
            "sky130_fd_sc_hd__a311o_2": 2,
            "sky130_fd_sc_hd__a311oi_2": 1,
            "sky130_fd_sc_hd__a31o_2": 4,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__and2_2": 14,
            "sky130_fd_sc_hd__and2b_2": 4,
            "sky130_fd_sc_hd__and3_2": 18,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__conb_1": 2,
            "sky130_fd_sc_hd__dfrtp_2": 25,
            "sky130_fd_sc_hd__dfxtp_2": 34,
            "sky130_fd_sc_hd__inv_2": 39,
            "sky130_fd_sc_hd__mux2_1": 30,
            "sky130_fd_sc_hd__nand2_2": 27,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3_2": 3,
            "sky130_fd_sc_hd__nand3b_2": 2,
            "sky130_fd_sc_hd__nand4_2": 2,
            "sky130_fd_sc_hd__nor2_2": 13,
            "sky130_fd_sc_hd__o211a_2": 2,
            "sky130_fd_sc_hd__o21a_2": 2,
            "sky130_fd_sc_hd__o21ai_2": 2,
            "sky130_fd_sc_hd__o21ba_2": 4,
            "sky130_fd_sc_hd__o21bai_2": 2,
            "sky130_fd_sc_hd__o221a_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 3,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 1,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__or2_2": 17,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3b_2": 2,
            "sky130_fd_sc_hd__or4_2": 4,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 29,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
}

103. Printing statistics.

=== counter ===

   Number of wires:                379
   Number of wire bits:            444
   Number of public wires:          86
   Number of public wire bits:     151
   Number of ports:                 11
   Number of port bits:             76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                354
     ram256x16                       2
     sky130_fd_sc_hd__a2111o_2       2
     sky130_fd_sc_hd__a211o_2        7
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21bo_2        3
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        11
     sky130_fd_sc_hd__a21oi_2       17
     sky130_fd_sc_hd__a221o_2        3
     sky130_fd_sc_hd__a22o_2         2
     sky130_fd_sc_hd__a311o_2        2
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2         4
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__and2_2        14
     sky130_fd_sc_hd__and2b_2        4
     sky130_fd_sc_hd__and3_2        18
     sky130_fd_sc_hd__and4_2         3
     sky130_fd_sc_hd__conb_1         2
     sky130_fd_sc_hd__dfrtp_2       25
     sky130_fd_sc_hd__dfxtp_2       34
     sky130_fd_sc_hd__inv_2         39
     sky130_fd_sc_hd__mux2_1        30
     sky130_fd_sc_hd__nand2_2       27
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3_2        3
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        2
     sky130_fd_sc_hd__nor2_2        13
     sky130_fd_sc_hd__o211a_2        2
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21ai_2        2
     sky130_fd_sc_hd__o21ba_2        4
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__o32a_2         2
     sky130_fd_sc_hd__or2_2         17
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3b_2         2
     sky130_fd_sc_hd__or4_2          4
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__xnor2_2       29
     sky130_fd_sc_hd__xor2_2         3

   Area for cell type \ram256x16 is unknown!

   Chip area for module '\counter': 3983.820800
     of which used for sequential elements: 1380.073600 (34.64%)

104. Executing Verilog backend.
Dumping module `\counter'.

105. Executing JSON backend.
