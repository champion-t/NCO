
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /home/thanh/NCO/counter.v
Parsing SystemVerilog input from `/home/thanh/NCO/counter.v' to AST representation.
Storing AST representation for module `$abstract\counter'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/thanh/NCO/ram256x16/ram256x16.v
Parsing SystemVerilog input from `/home/thanh/NCO/ram256x16/ram256x16.v' to AST representation.
Storing AST representation for module `$abstract\ram256x16'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\counter'.
Generating RTLIL representation for module `\counter'.

5.1. Analyzing design hierarchy..
Top module:  \counter

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ram256x16'.
Generating RTLIL representation for module `\ram256x16'.

5.3. Analyzing design hierarchy..
Top module:  \counter

5.4. Analyzing design hierarchy..
Top module:  \counter
Removing unused module `$abstract\ram256x16'.
Removing unused module `$abstract\counter'.
Removed 2 unused modules.
Renaming module counter to counter.

6. Generating Graphviz representation of design.
Writing dot description to `/home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/06-yosys-synthesis/hierarchy.dot'.
Dumping module counter to page 1.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \counter

8.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/thanh/NCO/counter.v:24$1 in module counter.
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\counter.$proc$/home/thanh/NCO/counter.v:24$1'.

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$/home/thanh/NCO/counter.v:24$1'.
     1/2: $0\sine_out[15:0]
     2/2: $0\tcout[7:0]

16. Executing PROC_DLATCH pass (convert process syncs to latches).

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.\sine_out' using process `\counter.$proc$/home/thanh/NCO/counter.v:24$1'.
  created $adff cell `$procdff$5' with positive edge clock and positive level reset.
Creating register for signal `\counter.\tcout' using process `\counter.$proc$/home/thanh/NCO/counter.v:24$1'.
  created $adff cell `$procdff$8' with positive edge clock and positive level reset.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `counter.$proc$/home/thanh/NCO/counter.v:24$1'.
Cleaned up 0 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~2 debug messages>

22. Executing FLATTEN pass (flatten design).

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

25. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

30. Executing OPT_DFF pass (perform DFF optimizations).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

32. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

33. Executing FSM pass (extract and optimize FSM).

33.1. Executing FSM_DETECT pass (finding FSMs in design).

33.2. Executing FSM_EXTRACT pass (extracting FSM from design).

33.3. Executing FSM_OPT pass (simple optimizations of FSMs).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

33.5. Executing FSM_OPT pass (simple optimizations of FSMs).

33.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

33.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

33.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

34. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

36. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

37. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

38. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

39. Executing OPT_DFF pass (perform DFF optimizations).

40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

41. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

42. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell counter.$add$/home/thanh/NCO/counter.v:30$2 ($add).
Removed top 24 bits (of 32) from port Y of cell counter.$add$/home/thanh/NCO/counter.v:30$2 ($add).

43. Executing PEEPOPT pass (run peephole optimizers).

44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

45. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter:
  creating $macc model for $add$/home/thanh/NCO/counter.v:30$2 ($add).
  creating $alu model for $macc $add$/home/thanh/NCO/counter.v:30$2.
  creating $alu cell for $add$/home/thanh/NCO/counter.v:30$2: $auto$alumacc.cc:485:replace_alu$9
  created 1 $alu and 0 $macc cells.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

52. Executing OPT_DFF pass (perform DFF optimizations).

53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

54. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

55. Executing MEMORY pass.

55.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

55.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

55.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

55.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

55.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

55.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

55.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

55.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

55.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

55.10. Executing MEMORY_COLLECT pass (generating $mem cells).

56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

57. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

59. Executing OPT_DFF pass (perform DFF optimizations).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

61. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

62. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

67. Executing OPT_SHARE pass.

68. Executing OPT_DFF pass (perform DFF optimizations).

69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

70. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

71. Executing TECHMAP pass (map to technology primitives).

71.1. Executing Verilog-2005 frontend: /nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

71.2. Continuing TECHMAP pass.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~244 debug messages>

72. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~43 debug messages>

73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

74. Executing OPT_DFF pass (perform DFF optimizations).

75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 10 unused cells and 44 unused wires.
<suppressed ~11 debug messages>

76. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

77. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

78. Executing OPT_DFF pass (perform DFF optimizations).

79. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

80. Executing ABC pass (technology mapping using ABC).

80.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 24 wires to a netlist network with 8 inputs and 8 outputs.

80.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

80.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:                OR cells:        2
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        8
Removing temp directory.

81. Executing OPT pass (performing simple optimizations).

81.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

81.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

81.3. Executing OPT_DFF pass (perform DFF optimizations).

81.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

81.5. Finished fast OPT passes.

82. Executing HIERARCHY pass (managing design hierarchy).

82.1. Analyzing design hierarchy..
Top module:  \counter

82.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

83. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

84. Printing statistics.

=== counter ===

   Number of wires:                 18
   Number of wire bits:             91
   Number of public wires:           8
   Number of public wire bits:      67
   Number of ports:                  6
   Number of port bits:             43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $_ANDNOT_                       3
     $_DFF_PP0_                     24
     $_NAND_                         3
     $_NOT_                          1
     $_OR_                           2
     $_XNOR_                         3
     $_XOR_                          4
     ram256x16                       1

85. Generating Graphviz representation of design.
Writing dot description to `/home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module counter to page 1.

86. Executing OPT pass (performing simple optimizations).

86.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

86.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

86.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

86.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

86.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

86.6. Executing OPT_DFF pass (perform DFF optimizations).

86.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

86.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

86.9. Finished OPT passes. (There is nothing left to do.)

87. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/tmp/f63f7fbfc4bd4696923281fd1892b916.lib ",
   "modules": {
      "\\counter": {
         "num_wires":         18,
         "num_wire_bits":     91,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 67,
         "num_ports":         6,
         "num_port_bits":     43,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         41,
         "num_cells_by_type": {
            "$_ANDNOT_": 3,
            "$_DFF_PP0_": 24,
            "$_NAND_": 3,
            "$_NOT_": 1,
            "$_OR_": 2,
            "$_XNOR_": 3,
            "$_XOR_": 4,
            "ram256x16": 1
         }
      }
   },
      "design": {
         "num_wires":         18,
         "num_wire_bits":     91,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 67,
         "num_ports":         6,
         "num_port_bits":     43,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         41,
         "num_cells_by_type": {
            "$_ANDNOT_": 3,
            "$_DFF_PP0_": 24,
            "$_NAND_": 3,
            "$_NOT_": 1,
            "$_OR_": 2,
            "$_XNOR_": 3,
            "$_XOR_": 4,
            "ram256x16": 1
         }
      }
}

88. Printing statistics.

=== counter ===

   Number of wires:                 18
   Number of wire bits:             91
   Number of public wires:           8
   Number of public wire bits:      67
   Number of ports:                  6
   Number of port bits:             43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $_ANDNOT_                       3
     $_DFF_PP0_                     24
     $_NAND_                         3
     $_NOT_                          1
     $_OR_                           2
     $_XNOR_                         3
     $_XOR_                          4
     ram256x16                       1

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_DFF_PP0_ is unknown!
   Area for cell type \ram256x16 is unknown!

[INFO] Applying tri-state buffer mapping from '/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

89. Executing TECHMAP pass (map to technology primitives).

89.1. Executing Verilog-2005 frontend: /home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

89.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

90. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

91. Executing TECHMAP pass (map to technology primitives).

91.1. Executing Verilog-2005 frontend: /home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/thanh/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

91.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

92. Executing SIMPLEMAP pass (map simple cells to gate primitives).

93. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

93.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\counter':
  mapped 24 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/tmp/f63f7fbfc4bd4696923281fd1892b916.lib ",
   "modules": {
      "\\counter": {
         "num_wires":         42,
         "num_wire_bits":     115,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 67,
         "num_ports":         6,
         "num_port_bits":     43,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         65,
         "area":              630.604800,
         "num_cells_by_type": {
            "$_ANDNOT_": 3,
            "$_NAND_": 3,
            "$_NOT_": 25,
            "$_OR_": 2,
            "$_XNOR_": 3,
            "$_XOR_": 4,
            "ram256x16": 1,
            "sky130_fd_sc_hd__dfrtp_2": 24
         }
      }
   },
      "design": {
         "num_wires":         42,
         "num_wire_bits":     115,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 67,
         "num_ports":         6,
         "num_port_bits":     43,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         65,
         "area":              630.604800,
         "num_cells_by_type": {
            "$_ANDNOT_": 3,
            "$_NAND_": 3,
            "$_NOT_": 25,
            "$_OR_": 2,
            "$_XNOR_": 3,
            "$_XOR_": 4,
            "ram256x16": 1,
            "sky130_fd_sc_hd__dfrtp_2": 24
         }
      }
}

94. Printing statistics.

=== counter ===

   Number of wires:                 42
   Number of wire bits:            115
   Number of public wires:           8
   Number of public wire bits:      67
   Number of ports:                  6
   Number of port bits:             43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                       3
     $_NAND_                         3
     $_NOT_                         25
     $_OR_                           2
     $_XNOR_                         3
     $_XOR_                          4
     ram256x16                       1
     sky130_fd_sc_hd__dfrtp_2       24

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type \ram256x16 is unknown!

   Chip area for module '\counter': 630.604800
     of which used for sequential elements: 630.604800 (100.00%)

[INFO] Using generated ABC script '/home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/06-yosys-synthesis/AREA_0.abc'â€¦

95. Executing ABC pass (technology mapping using ABC).

95.1. Extracting gate netlist of module `\counter' to `/tmp/yosys-abc-bDgd8p/input.blif'..
Extracted 40 gates and 49 wires to a netlist network with 9 inputs and 32 outputs.

95.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-bDgd8p/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-bDgd8p/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-bDgd8p/input.blif 
ABC: + read_lib -w /home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/tmp/f63f7fbfc4bd4696923281fd1892b916.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/tmp/f63f7fbfc4bd4696923281fd1892b916.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/06-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =     39 ( 64.1 %)   Cap = 27.7 ff (  8.0 %)   Area =      236.48 ( 35.9 %)   Delay =   865.87 ps  (  7.7 %)               
ABC: Path  0 --       3 : 0    2 pi                      A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   6.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      45 : 3    7 sky130_fd_sc_hd__and3_2 A =   7.51  Df = 252.2   -5.8 ps  S = 153.9 ps  Cin =  1.5 ff  Cout =  27.2 ff  Cmax = 309.5 ff  G = 1759  
ABC: Path  2 --      54 : 3    2 sky130_fd_sc_hd__and3_2 A =   7.51  Df = 492.6   -6.6 ps  S =  90.8 ps  Cin =  1.5 ff  Cout =  13.1 ff  Cmax = 309.5 ff  G =  846  
ABC: Path  3 --      57 : 2    1 sky130_fd_sc_hd__xor2_2 A =  16.27  Df = 865.9 -167.5 ps  S = 428.5 ps  Cin =  8.6 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G =  390  
ABC: Start-point = pi2 (\tcout [2]).  End-point = po7 ($auto$alumacc.cc:485:replace_alu$9.Y [7]).
ABC: netlist                       : i/o =    9/   32  lat =    0  nd =    39  edge =     61  area =236.43  delay = 3.00  lev = 3
ABC: + write_blif /tmp/yosys-abc-bDgd8p/output.blif 

95.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       25
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:       32
Removing temp directory.

96. Executing SETUNDEF pass (replace undef values with defined constants).

97. Executing HILOMAP pass (mapping to constant drivers).

98. Executing SPLITNETS pass (splitting up multi-bit signals).

99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 57 unused wires.
<suppressed ~1 debug messages>

100. Executing INSBUF pass (insert buffer cells for connected wires).

101. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/thanh/NCO/runs/RUN_2025-03-03_16-15-17/tmp/f63f7fbfc4bd4696923281fd1892b916.lib ",
   "modules": {
      "\\counter": {
         "num_wires":         70,
         "num_wire_bits":     107,
         "num_pub_wires":     30,
         "num_pub_wire_bits": 67,
         "num_ports":         6,
         "num_port_bits":     43,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         65,
         "area":              870.835200,
         "num_cells_by_type": {
            "ram256x16": 1,
            "sky130_fd_sc_hd__a21oi_2": 2,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__conb_1": 1,
            "sky130_fd_sc_hd__dfrtp_2": 24,
            "sky130_fd_sc_hd__inv_2": 25,
            "sky130_fd_sc_hd__nand2_2": 1,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
   },
      "design": {
         "num_wires":         70,
         "num_wire_bits":     107,
         "num_pub_wires":     30,
         "num_pub_wire_bits": 67,
         "num_ports":         6,
         "num_port_bits":     43,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         65,
         "area":              870.835200,
         "num_cells_by_type": {
            "ram256x16": 1,
            "sky130_fd_sc_hd__a21oi_2": 2,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__conb_1": 1,
            "sky130_fd_sc_hd__dfrtp_2": 24,
            "sky130_fd_sc_hd__inv_2": 25,
            "sky130_fd_sc_hd__nand2_2": 1,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
}

102. Printing statistics.

=== counter ===

   Number of wires:                 70
   Number of wire bits:            107
   Number of public wires:          30
   Number of public wire bits:      67
   Number of ports:                  6
   Number of port bits:             43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     ram256x16                       1
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__dfrtp_2       24
     sky130_fd_sc_hd__inv_2         25
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__nor2_2         2
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         3

   Area for cell type \ram256x16 is unknown!

   Chip area for module '\counter': 870.835200
     of which used for sequential elements: 630.604800 (72.41%)

103. Executing Verilog backend.
Dumping module `\counter'.

104. Executing JSON backend.
